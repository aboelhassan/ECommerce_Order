server.port=8082
spring.application.name=Order
spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=sa
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.datasource.url=jdbc:h2:file:/data/demo1
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.cloud.stream.kafka.binder.defaultBrokerPort=29092


spring.cloud.function.definition=OrderRequestHandler

spring.cloud.stream.function.bindings.OrderRequestHandler-in-0=OrderRequestHandlerinput
spring.cloud.stream.bindings.OrderRequestHandlerinput.destination=order
spring.cloud.stream.bindings.OrderRequestHandlerinput.group=orders_group


# All traces should be sent to latency analysis tool
management.tracing.sampling.probability=1.0
#management.zipkin.tracing.endpoint: http://zipkin:9411/api/v2/spans
#management.endpoints.web.exposure.include=prometheus
#tracing.url= http://jaeger:4318/v1/traces

management.otlp.tracing.endpoint=http://jaeger:4318/v1/traces

# For Exemplars to work we need histogram buckets
#management.metrics.distribution.percentiles-histogram.http.server.requests=true

# traceID and spanId are predefined MDC keys - we want the logs to include them
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
#logging.level.root=debug
spring.cloud.stream.kafka.binder.enable-observation=true



#metrics
management.security.enabled=false
management.endpoints.web.exposure.include= health, prometheus, metrics
#management.endpoint.metrics.enabled=true
#management.endpoint.prometheus.enabled=true
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always
management.endpoint.health.probes.enabled=true
management.metrics.tags.applicaiton=Order